from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command

from aiogram.types import Message, CallbackQuery, PreCheckoutQuery
from data import NEURAL_NETWORKS
from keyboards import (
    get_main_menu_keyboard, 
    get_category_keyboard, 
    get_network_keyboard,
    get_help_keyboard,
    get_about_keyboard
)
from config import BOT_NAME, BOT_DESCRIPTION, AUTHOR_USER_ID
from stars import (
    get_support_info_text,
    get_support_keyboard,
    create_stars_invoice,
    get_payment_keyboard,
    handle_successful_payment,
    get_stars_statistics_text
)


# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router()

@router.message(CommandStart())
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = f"""ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {BOT_NAME}!

{BOT_DESCRIPTION}

üéØ **–ß—Ç–æ –º–æ–∂–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç:**
‚Ä¢ üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π –ø–æ –æ–±–ª–∞—Å—Ç—è–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
‚Ä¢ ü§ñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–∂–¥–æ–π –ò–ò
‚Ä¢ üí∞ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏  
‚Ä¢ üîó –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∞–π—Ç—ã
‚Ä¢ ‚ö° –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"""

    await message.answer(
        text=welcome_text,
        reply_markup=get_main_menu_keyboard()
    )

@router.message(Command("categories"))
async def categories_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /categories"""
    categories_text = "üìÇ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π:**\n\n"
    
    for category_id, category_data in NEURAL_NETWORKS.items():
        networks_count = len(category_data['networks'])
        categories_text += f"‚Ä¢ {category_data['name']} ({networks_count} –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π)\n"
        categories_text += f"  _{category_data['description']}_\n\n"
    
    categories_text += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π:"
    
    await message.answer(
        text=categories_text,
        reply_markup=get_main_menu_keyboard(),
        parse_mode="Markdown"
    )

@router.message(Command("help"))
async def help_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """‚ùì **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

üîç **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
1. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π
2. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ò–ò
3. –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –Ω–µ–π—Ä–æ—Å–µ—Ç—å
4. –ò–∑—É—á–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
5. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∑–∞–Ω–æ–≤–æ
‚Ä¢ `/categories` - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
‚Ä¢ `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üÜï **–û–±–Ω–æ–≤–ª–µ–Ω–∏—è:**
–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π —Ä–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ü–µ–Ω–∞—Ö –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö.

‚ö†Ô∏è **–í–∞–∂–Ω–æ:**
–¶–µ–Ω—ã –∏ —É—Å–ª–æ–≤–∏—è –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è. –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∞–π—Ç–∞—Ö –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π."""

    await message.answer(
        text=help_text,
        reply_markup=get_help_keyboard(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "main_menu")
async def main_menu_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    main_menu_text = f"""üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - {BOT_NAME}**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:**
‚Ä¢ {len(NEURAL_NETWORKS)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π
‚Ä¢ {sum(len(cat['networks']) for cat in NEURAL_NETWORKS.values())} –ò–ò –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ {callback.message.date.strftime('%B %Y')}

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π:"""

    await callback.message.edit_text(
        text=main_menu_text,
        reply_markup=get_main_menu_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("category:"))
async def category_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = callback.data.split(":")[1]
    
    if category_id not in NEURAL_NETWORKS:
        await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    
    category_data = NEURAL_NETWORKS[category_id]
    networks_count = len(category_data['networks'])
    
    category_text = f"""üìÇ **{category_data['name']}**

üìù _{category_data['description']}_

ü§ñ **–î–æ—Å—Ç—É–ø–Ω–æ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π:** {networks_count}

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"""

    await callback.message.edit_text(
        text=category_text,
        reply_markup=get_category_keyboard(category_id),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("network:"))
async def network_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"""
    try:
        _, category_id, network_id = callback.data.split(":")
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!", show_alert=True)
        return
    
    if (category_id not in NEURAL_NETWORKS or 
        network_id not in NEURAL_NETWORKS[category_id]['networks']):
        await callback.answer("‚ùå –ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    
    network_data = NEURAL_NETWORKS[category_id]['networks'][network_id]
    
    network_text = f"""ü§ñ **{network_data['name']}**

üìã **–û–ø–∏—Å–∞–Ω–∏–µ:**
{network_data['description']}

üÜì **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
{network_data['free_features']}

‚ö†Ô∏è **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏:**
{network_data['limitations']}

üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:**
{network_data['pricing']}

üîó –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç."""

    await callback.message.edit_text(
        text=network_text,
        reply_markup=get_network_keyboard(category_id, network_id),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "help")
async def help_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
    help_text = """‚ùì **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**

üéØ **–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –±–æ—Ç–∞:**
–ü–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –≤–∞—à–∏—Ö –∑–∞–¥–∞—á —Å—Ä–µ–¥–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.

üîç **–ö–∞–∫ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –Ω–µ–π—Ä–æ—Å–µ—Ç—å:**
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏ (–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ç–µ–∫—Å—Ç—ã, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ç.–¥.)
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
‚Ä¢ –ò–∑—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
‚Ä¢ –°—Ä–∞–≤–Ω–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Ü–µ–Ω—ã
‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –∏ –Ω–∞—á–Ω–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å!

üí° **–°–æ–≤–µ—Ç—ã –ø–æ –≤—ã–±–æ—Ä—É:**
‚Ä¢ –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
‚Ä¢ –û–±—Ä–∞—â–∞–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
‚Ä¢ –°—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
‚Ä¢ –ß–∏—Ç–∞–π—Ç–µ –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

üì± **–ö–æ–Ω—Ç–∞–∫—Ç—ã:**
–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞ –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –Ω–µ–π—Ä–æ—Å–µ—Ç—å - —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º."""

    await callback.message.edit_text(
        text=help_text,
        reply_markup=get_help_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "about")
async def about_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û –±–æ—Ç–µ'"""
    about_text = f"""‚ÑπÔ∏è **–û –±–æ—Ç–µ {BOT_NAME}**

üéØ **–ú–∏—Å—Å–∏—è:** –£–ø—Ä–æ—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä –ø–æ–¥—Ö–æ–¥—è—â–µ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –ª—é–±—ã—Ö –∑–∞–¥–∞—á.

üìä **–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(NEURAL_NETWORKS)}
‚Ä¢ –ù–µ–π—Ä–æ—Å–µ—Ç–µ–π –≤ –±–∞–∑–µ: {sum(len(cat['networks']) for cat in NEURAL_NETWORKS.values())}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –Ø–Ω–≤–∞—Ä—å 2025

‚ö° **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞–∂–¥–æ–π –ò–ò
‚Ä¢ –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∞–π—Ç—ã
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ü—Ä–æ—Å—Ç–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∏ –ø–æ–∏—Å–∫

üîÑ **–û–±–Ω–æ–≤–ª–µ–Ω–∏—è:**
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–π—Ä–æ—Å–µ—Ç—è—Ö –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö.

üíù **–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:**
–ï—Å–ª–∏ –±–æ—Ç –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è –≤–∞—Å, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –∫–æ–ª–ª–µ–≥–∞–º–∏!"""

    await callback.message.edit_text(
        text=about_text,
        reply_markup=get_about_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "updates")
async def updates_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö"""
    updates_text = """üîÑ **–ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π**

üìÖ **–Ø–Ω–≤–∞—Ä—å 2025:**
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ 50+ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ü–µ–Ω—ã –Ω–∞ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
‚Ä¢ –£–ª—É—á—à–µ–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–æ—Ç–∞

üìÖ **–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –≤ —Ñ–µ–≤—Ä–∞–ª–µ 2025:**
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–∫–∏–¥–∫–∞—Ö
‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π
‚Ä¢ –†–µ–π—Ç–∏–Ω–≥–∏ –∏ –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

üÜï **–ù–µ–¥–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:**
‚Ä¢ Luma Dream Machine (–≤–∏–¥–µ–æ)
‚Ä¢ Claude Sonnet 4 (–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ)
‚Ä¢ Suno v4 (–º—É–∑—ã–∫–∞)
‚Ä¢ Kling AI (–≤–∏–¥–µ–æ)

üîî **–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏** - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü!"""

    await callback.message.edit_text(
        text=updates_text,
        reply_markup=get_about_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "support")
async def support_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
    support_text = get_support_info_text()
    
    await callback.message.edit_text(
        text=support_text,
        reply_markup=get_support_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("support:"))
async def support_package_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    package_id = callback.data.split(":")[1]
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã
    invoice_link = await create_stars_invoice(
        bot=callback.bot,
        user_id=callback.from_user.id,
        package_id=package_id
    )
    
    if not invoice_link:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return
    
    from config import STARS_PACKAGES
    package = STARS_PACKAGES[package_id]
    
    payment_text = f"""üí´ **{package['title']}**

üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {package['description']}
‚≠ê **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {package['stars']} Telegram Stars
üí∞ **–¶–µ–Ω–∞:** ~{package['stars'] * 0.013:.2f}$ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–≥–∏–æ–Ω–∞)

üåü **–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å:**
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å Stars"
2. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–ª–∞—Ç–µ–∂ –≤ Telegram
3. –ü–æ–ª—É—á–∏—Ç–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞!

‚ö° **–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞** - –ø–ª–∞—Ç–µ–∂ –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ Telegram –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–π –¥–ª—è –≤–∞—Å!"""

    await callback.message.edit_text(
        text=payment_text,
        reply_markup=get_payment_keyboard(invoice_link, package_id),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ pre-checkout –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è Stars"""
    # –î–ª—è Stars –≤—Å–µ–≥–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    await pre_checkout_query.answer(ok=True)

@router.message(F.successful_payment)
async def successful_payment_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    payment = message.successful_payment
    
    success = await handle_successful_payment(
        bot=message.bot,
        user_id=message.from_user.id,
        payload=payment.invoice_payload,
        total_amount=payment.total_amount
    )
    
    if success:
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        await message.answer(
            text="üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu_keyboard()
        )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
@router.message(Command("admin"))
async def admin_command(message: Message):
    """–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∞)"""
    if message.from_user.id != AUTHOR_USER_ID:
        return
    
    stats_text = get_stars_statistics_text()
    await message.answer(
        text=stats_text,
        parse_mode="Markdown"
    )

@router.message()
async def unknown_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        text="ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start",
        reply_markup=get_main_menu_keyboard()
    )

def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.include_router(router)