import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.types import BotCommand
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from aiohttp.web import AppRunner, TCPSite
from handlers import register_handlers
from config import BOT_TOKEN, BOT_NAME, WEBHOOK_URL

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–µ–Ω—é
COMMANDS = [
    BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
    BotCommand(command="categories", description="üìÇ –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"),
    BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å"),
]

async def set_commands(bot: Bot):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    await bot.set_my_commands(COMMANDS)

async def on_startup(bot: Bot):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    bot_info = await bot.get_me()
    logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API —É—Å–ø–µ—à–Ω–æ")
    logger.info(f"üë§ –ò–º—è –±–æ—Ç–∞: @{bot_info.username}")
    logger.info(f"üÜî ID –±–æ—Ç–∞: {bot_info.id}")
    
    await set_commands(bot)
    logger.info("‚å®Ô∏è –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook –µ—Å–ª–∏ –µ—Å—Ç—å
    await bot.delete_webhook()
    logger.info("üóëÔ∏è –°—Ç–∞—Ä—ã–π webhook —É–¥–∞–ª–µ–Ω")
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"üîó Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –µ—â–µ —Ä–∞–∑
        if not BOT_TOKEN:
            raise ValueError("BOT_TOKEN –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        if not WEBHOOK_URL:
            raise ValueError("WEBHOOK_URL –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –¥–ª—è webhook —Ä–µ–∂–∏–º–∞")
        
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ {BOT_NAME} –≤ webhook —Ä–µ–∂–∏–º–µ...")
        logger.info(f"üîë –¢–æ–∫–µ–Ω: {BOT_TOKEN[:10]}...{BOT_TOKEN[-10:]}")
        logger.info(f"üîó Webhook URL: {WEBHOOK_URL}")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        bot = Bot(token=BOT_TOKEN)
        dp = Dispatcher()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        register_handlers(dp)
        logger.info("üìù –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –í—ã–∑–æ–≤ startup
        await on_startup(bot)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
        app = web.Application()
        SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path="/webhook")
        setup_application(app, dp, bot=bot)
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
        runner = AppRunner(app)
        await runner.setup()
        site = TCPSite(runner, "0.0.0.0", 8080)
        await site.start()
        
        logger.info("ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ webhook —Ä–µ–∂–∏–º–µ!")
        logger.info("üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:8080")
        logger.info("üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É –≤ Telegram –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –î–µ—Ä–∂–∏–º —Å–µ—Ä–≤–µ—Ä –∂–∏–≤—ã–º
        await asyncio.Event().wait()
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        logger.error("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
    finally:
        if 'runner' in locals():
            await runner.cleanup()
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())